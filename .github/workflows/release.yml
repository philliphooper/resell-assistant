name: Release Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '18'
  SOLUTION_PATH: 'Resell Assistant.sln'
  MAIN_PROJECT_PATH: 'Resell Assistant/Resell Assistant.csproj'
  CLIENT_APP_PATH: 'Resell Assistant/ClientApp'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for versioning

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.CLIENT_APP_PATH }}/package-lock.json'

      - name: Get version information
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Restore solution dependencies
        run: dotnet restore "${{ env.SOLUTION_PATH }}"

      - name: Install Node.js dependencies
        run: |
          cd "${{ env.CLIENT_APP_PATH }}"
          npm ci

      - name: Build React frontend for production
        run: |
          cd "${{ env.CLIENT_APP_PATH }}"
          npm run build

      - name: Build solution for release
        run: |
          dotnet build "${{ env.SOLUTION_PATH }}" \
            --configuration Release \
            --no-restore \
            -p:Version=${{ steps.version.outputs.version }}

      - name: Run tests
        run: |
          dotnet test "${{ env.SOLUTION_PATH }}" \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --logger "trx;LogFileName=release-test-results.trx" \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults

      - name: Publish application
        run: |
          dotnet publish "${{ env.MAIN_PROJECT_PATH }}" \
            --configuration Release \
            --output ./publish \
            --no-restore \
            -p:Version=${{ steps.version.outputs.version }} \
            -p:PublishReadyToRun=true \
            -p:PublishSingleFile=false

      - name: Create release archive
        run: |
          cd publish
          tar -czf ../resell-assistant-${{ steps.version.outputs.version }}.tar.gz *
          cd ..
          zip -r resell-assistant-${{ steps.version.outputs.version }}.zip publish/*

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ steps.version.outputs.version }}
          path: |
            ./publish/
            *.tar.gz
            *.zip
            ./TestResults/

      - name: Log in to Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Check if Dockerfile exists
        id: check-dockerfile
        run: |
          if [ -f "Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        if: steps.check-dockerfile.outputs.exists == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  create-github-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-and-publish
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-${{ needs.build-and-publish.outputs.version }}

      - name: Get version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release-notes
        run: |
          # Generate simple release notes from recent commits
          echo "## Changes in this release" > release-notes.md
          echo "" >> release-notes.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release-notes.md || echo "- Initial release" >> release-notes.md

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ steps.version.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./resell-assistant-${{ steps.version.outputs.version }}.tar.gz
          asset_name: resell-assistant-${{ steps.version.outputs.version }}.tar.gz
          asset_content_type: application/gzip
